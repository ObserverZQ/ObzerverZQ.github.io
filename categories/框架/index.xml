<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>框架 on Observer的小家</title>
    <link>https://observerzq.github.io/ObzerverZQ.github.io/categories/%E6%A1%86%E6%9E%B6/</link>
    <description>Recent content in 框架 on Observer的小家</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Mar 2021 10:14:26 +0800</lastBuildDate><atom:link href="https://observerzq.github.io/ObzerverZQ.github.io/categories/%E6%A1%86%E6%9E%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>flex布局</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/flex%E5%B8%83%E5%B1%80/</link>
      <pubDate>Tue, 09 Mar 2021 10:14:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/flex%E5%B8%83%E5%B1%80/</guid>
      <description>flex: flex-grow flex-shrink flex-basis flex-grow 属性定义项目的放大比例，默认值为0，不放大，x为放大x倍 flex-shrink 属性定义了项目的缩小比例，默认值为1，空间不足即缩小，0是不缩小 flex-basis 定义了在分配多余空间之前，项目占据的主轴空间（main size）。默认值为auto，项目默认的大小
   语法 等于 描述 备注     flex: initial flex: 0 1 auto 容器默认不放大，尺寸不足会缩小，尺寸自适应内容 初始值   flex: 0 flex: 0 1 0% 默认放大，尺寸不足会缩小，大小支持0，即最小的内容尺寸 场景少   flex: none flex: 0 0 auto 默认不放大，尺寸不足也不缩小，子项的尺寸就是父级的尺寸时使用    flex: 1 flex: 1 1 0% 可以弹性变大，也可以弹性缩小，尺寸不足时优先最小化内容    flex: auto flex: 1 1 auto 可以弹性变大，也可以弹性缩小，尺寸不足时优先最大化内容 基于内容动态匹配    参考资料：</description>
    </item>
    
    <item>
      <title>Web UI 自动化测试实践</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/web-ui-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 09 Mar 2021 10:14:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/web-ui-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/</guid>
      <description>Vue的缺点： 全局的this Vue 2 html、data声明、涉及方法代码片段分散，可复用性差
今日份吐血： 需要重复复制相同逻辑代码，功能代码分散 另一个页面需要使用，则需要复制相应的type action enum，
上下文丢失 Vue 的单文件组件，使用 、对代码进行分割，直接导致的问题就是上下文丢失。 举个例子，你封装了一些常用的函数，在 Vue 文件中 import 进来。你这个函数能在 template 中直接使用吗？ 不能。 需要在data或者method中中再次声明。 或者用namespace直接定义好action mutation
模板分割 好的代码组织能将常变与不变的部分进行分割解耦
Vue 的模板严重限制了这一点。 举个例子，前端有个下拉菜单，功能不断增加，而且对于不同的人要显示不同菜单（权限管理）。在 Vue 中，为了实现 html 代码（绑定在 template 中）的分割，你只能再搞一个组件。在 React 中，可以直接这样写：
const menu = &amp;lt;div&amp;gt;abc&amp;lt;div&amp;gt;; 可单独做一个组件（低开销函数组件），也可当做变量，放在当前代码中。相对灵活很多。 SX 手写 render 渲染函数自带下面的优势
 完整的 js 功能来构建视图页面，可以使用临时变量、js 自带的控制流、以及直接引用当前 js 作用域中的值 开发工具对 jsx 的支持比现有 vue 模板先进（linting、typescript、编译器自动补全）  参考资料：
为什么我们放弃了 Vue？Vue 和 React 深度对比</description>
    </item>
    
  </channel>
</rss>
