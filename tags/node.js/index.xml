<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on Observer的小家</title>
    <link>https://observerzq.github.io/ObzerverZQ.github.io/tags/node.js/</link>
    <description>Recent content in Node.js on Observer的小家</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Mar 2021 10:54:26 +0800</lastBuildDate><atom:link href="https://observerzq.github.io/ObzerverZQ.github.io/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web UI 自动化测试实践</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/web-ui-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 08 Mar 2021 10:54:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/web-ui-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/</guid>
      <description>Selenium：可以直接在浏览器中运行，目前使用版本v3，最高版本v4（不稳定） 安装、运行：http://www.testclass.net/selenium_python/install-selenium 可能遇到浏览器驱动问题，https://blog.csdn.net/tymatlab/article/details/78649727 http://www.testclass.net/selenium_python/selenium3-browser-driver chrome驱动下载地址：https://sites.google.com/a/chromium.org/chromedriver/home
元素定位：http://www.testclass.net/selenium_python/find-element 对项目元素设置不同的classsname、css选择器，即可通过以下方法获取到该元素
dr.find_element_by_class_name(&amp;#34;s_ipt&amp;#34;) dr.find_element_by_css_selector(&amp;#34;#kw&amp;#34;) dr.find_element_by_css_selector(&amp;#34;[name=wd]&amp;#34;) dr.find_element_by_css_selector(&amp;#34;.s_ipt&amp;#34;) dr.find_element_by_css_selector(&amp;#34;html &amp;gt; body &amp;gt; form &amp;gt; span &amp;gt; input&amp;#34;) dr.find_element_by_css_selector(&amp;#34;span.soutu-btn&amp;gt; input#kw&amp;#34;) dr.find_element_by_css_selector(&amp;#34;form#form &amp;gt; span &amp;gt; input&amp;#34;) 控制浏览器操作： http://www.testclass.net/selenium_python/control-browser
其余操作：包括鼠标事件、键盘事件、窗口切换、文件上传、关闭浏览器等 http://www.testclass.net/selenium_python
cd ~ // 进入根目录 vim .bash_profile // 创建或者打开该文件
// .bash_profile以及.bashrc以及.zshrc均输入以下内容 export M2_HOME=/Users/mtdp/project/apache-maven-3.6.3 // /Users/mtdp/project/apache-maven-3.6.3 这个路径是自己存放maven的路径 export M2=$M2_HOME/bin // 不动 export PATH=$M2:$PATH // 不动 export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home // 一般情况下只需要修改jdk版本号就好了，和自己安装的版本号一致，安装mvn和jdk后可以通过mvn -v查询到路径
// 保存后使用source命令 source .bash_profile/.bashrc/.zshrc
// java环境配置完成
// 修改maven的setting文件。进入maven安装目录打开conf下面的settings文件
 在自己的目录下新建java包存放文件夹，如maven_repostory，我的路径为/Users/mtdp/project/maven_repostory 打开settings.xml文件，修改localRepository路径  /Users/mtdp/project/maven_repostory// 改成自己的路径 meituan-nexus-releasesdeploymentdeployment123&amp;hellip; // 安装python，由于mac本来自带python2，但是如果使用不当可能会引起mac系统崩溃，因此我们使用python3 brew install python3 // 安装python3，如果没有安装brew，使用/bin/bash -c &amp;ldquo;$(curl -fsSL https://raw.</description>
    </item>
    
    <item>
      <title>Node.js 常见问题15条</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/node.js-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%9815%E6%9D%A1/</link>
      <pubDate>Mon, 22 Feb 2021 19:23:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/node.js-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%9815%E6%9D%A1/</guid>
      <description>临阵磨枪，不快也光。对于成功的编程面试来说，准备和知识面一样重要。准备使你有信心参加面试，而不用担心莫名的紧张情绪。如果第一次参加编程面试，这一点尤其重要。
为帮助 Node.js 开发人员更好的面试，我列出了 15 个常见的 Node.js 和网络开发相关的面试问题。
在本文中，我们将重点讨论 Node.js 相关问题。但是，请记住 JavaScript 问题在 Node.js 面试中也经常问到，所以准备一些对你来说没什么坏处。不久前我们写了一篇关于常见 JavaScript 面试问题的帖子，涵盖了所有这些基础。
https://livecodestream.dev/post/20-common-javascript-interview-questions/
现在，让我们深入了解面试中可能会问到的 Node.js 问题。
 Node.js 与 JavaScript 有什么不同?    Image 
什么时候用 Node.js？ Node.js 是异步的、事件驱动的、非阻塞的和单线程的，使得它成为开发下面应用程序的完美候选：    实时应用程序，如聊天和提供实时更新的应用程序
  将视频或其他多媒体内容流式传输给大量观众的流式应用程序
  其他 I/O 密集型应用程序，如协作平台
  遵循微服务架构的网络后端
  然而，Node.js 的特性使得它对于其他类型的应用程序来说不是一个理想的选择。执行 CPU 密集型任务的应用程序（如复杂的数学计算）在使用 CPU 时表现不佳，因为 Node.js 是单线程的。
EventEmitter 做了什么？ Node.js 中任何对象发出的事件都是 EventEmitter 类的实例，就像 http 模块。  所有 EventEmitter 类都可以使用 eventEmitter.</description>
    </item>
    
  </channel>
</rss>
