[{"content":"项目结构优化 Vue Router 现在分为三个模块：\n History 实现： 处理地址栏，并且特定于 Vue Router 运行的环境（节点，浏览器，移动设备等） Router 匹配器：处理类似 /users/:id 的路由解析和优先级处理。 Router: 将一切连接在一起，并处理路由特定功能，例如导航守卫。  |____types | |____typeGuards.ts // 对route进行校验 | |____index.ts // type和interface |____router.ts // connects everything together and handle routing specific features like navigation guards |____RouterLink.ts |____errors.ts |____globalExtensions.ts |____injectionSymbols.ts |____utils | |____callbacks.ts | |____README.md | |____index.ts | |____env.ts |____devtools.ts |____location.ts |____matcher // handles the parsing of routes /users/:id and its ranking | |____pathTokenizer.ts // path解析器，生成token数组tokenizePath | |____pathMatcher.ts // 提供createRouteRecordMatcher方法供index调用，在addRoute时创建matcher | |____pathParserRanker.ts // 对每一个setment计算score | |____types.ts // 定义RouteRecordNormalized作为RouteRecord | |____index.ts // 定义并实现RouterMatcher，内部定义matcherMap路由映射；对RouteRecord、RouteProps进行normalize |____warning.ts |____RouterView.ts |____scrollBehavior.ts |____history // handles the address bar and is specific to the environment Vue Router runs on (Node, Browser, Mobile, etc) | |____common.ts // 列举一些通用的用于History API的interface、type、enum和在两个模式下通用的方法 | |____hash.ts // hash模式，createWebHashHistory | |____html5.ts // html5模式，createWebHistory | |____memory.ts // abstract模式，createMemoryHistory, 记录路由队列、监听器和当前位置，实现router方法。如果发现没有浏览器的 API，路由会自动强制进入这个模式 |____global.d.ts |____useApi.ts |____index.ts |____query.ts |____encoding.ts |____navigationGuards.ts // 路由守卫 // src/history/html5.ts /** * Creates a normalized history location from a window.location object * @param location - */ function createCurrentLocation( base: string, location: Location ): HistoryLocation {} function useHistoryListeners(base: string, historyState: ValueContainer\u0026lt;StateEntry\u0026gt;, currentLocation: ValueContainer\u0026lt;HistoryLocation\u0026gt;, replace: RouterHistory[\u0026#39;replace\u0026#39;] ){} function useHistoryStateNavigation(base: string) {} export function createWebHistory(base?: string): RouterHistory {} 动态路由 Vue Router3 { // 会匹配所有路径 path: '*' } { // 会匹配以 `/user-` 开头的任意路径 path: '/user-*' } vue-router 3使用 path-to-regexp 作为路径匹配引擎。 有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。当使用通配符路由时，必须确保路由的顺序是正确的，也就是说含有通配符的路由应该放在最后。路由 { path: \u0026lsquo;*\u0026rsquo; } 通常用于客户端 404 错误。如果你使用了History 模式，请确保正确配置你的服务器。\nVue Router 4 不再使用path-to-regexp，而是使用自己的转化系统。新增了有自动优先级排名的高级路径解析功能，用户新现在可以以随意的顺序定义路由，因为 Router 会根据 URL 字符串表示来猜测应该匹配的路由。 举个例子来说，你同时写了 /users 和 /:w+ 这两个路由：\nconst routes = [ { path: \u0026#39;/users\u0026#39;, Component: Users }, { path: \u0026#39;/:w+\u0026#39;, Component: NotFound } ] 那么你当然希望在输入 /users 这个更精确的路径的时候，走上面的规则，而下面则作为兜底规则。在旧版的 Vue Router 中需要通过路由声明的顺序来保证这个行为，而新版则无论你怎样放置，都会按照得分系统来计算该匹配哪个路由。\n甚至专门有 Path Ranker这个网页来帮助你计算路由的优先级得分。 简单来说，越明确的路由排名越高，越模糊则反之，无关顺序，非常有意思。\n改进后的导航系统 新的导航系统更加具有一致性，它改善了滚动行为的体验，使其更加接近原生浏览器的行为。 它还为用户提供了有关导航状态的几乎更多信息，用户可以用这些信息，通过 ProgressBar和 Modal之类的全局 UI 元素让用户的体验变得更好。 改进动机：\n 先前的selector默认使用document.querySelector。但是这个API不支持 /^#\\d/即以数字开头的id元素，所以vue3团队决定针对这种参数使用getElementById。但是这个API仍不适用于选择某个id元素内的某个class的元素，比如#1one .container。诸如此类的情况都会导致vue-router抛出document.querySelector failed，让用户产生困惑。  { x: number, y: number } { selector: string, offset? : { x: number, y: number }} 基于Element.scrollTo的参数配置ScrollToOptions，vue-router 4进行了改造  // vue router 3 scrollBehavior (to, from, savedPosition) { if (to.hash) { return { selector: to.hash } // return { x: 0, y: 200 }  } } // native JS element.scrollTo({ top: 100, left: 100, behavior: \u0026#39;smooth\u0026#39; }); // vue router 4 const router = new Router({ scrollBehavior(to, from, savedPosition) { // scroll to id `can~contain-special\u0026gt;characters` + 200px  return { el: \u0026#39;#can~contain-special\u0026gt;characters\u0026#39; // top relative offset  top: 200 // instead of `offset: { y: 200 }`  } } }) 更强大的 Devtools 多亏了新的Vue Devtools，Vue Router 能够和浏览器进行以下更高级的整合。\n 时间轴记录路由变化：   Timeline  完整 route 目录，能够帮助你轻松进行调试：   Routes directory   更好的路由守卫 beforeEach // BAD router.beforeEach((to, from, next) =\u0026gt; { if (to.name !== \u0026#39;Login\u0026#39; \u0026amp;\u0026amp; !isAuthenticated) next({ name: \u0026#39;Login\u0026#39; }) // 如果用户未能验证身份，则 `next` 会被调用两次  next() }) // GOOD router.beforeEach((to, from, next) =\u0026gt; { if (to.name !== \u0026#39;Login\u0026#39; \u0026amp;\u0026amp; !isAuthenticated) next({ name: \u0026#39;Login\u0026#39; }) else next() }) 确保 next 函数在任何给定的导航守卫中都被严格调用一次。它可以出现多于一次，但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错。 和next说拜拜，现在确认跳转不需要再手动执行这个函数了，而是根据你的返回值来决定行为。同样支持异步返回 Promise。\n现在的路由守卫 API 更加友好且合理了，可以完美利用 async await 做异步处理，比如这样：\nrouter.beforeEach(async (to, from) =\u0026gt; { // canUserAccess() returns `true` or `false`  return await canUserAccess(to) }) 路由独享的守卫 现在beforeEnter支持传入函数数组，便于复用，例如跳转到某个路由后自动去除所有query和hash\n// vue-router 3 const router = new VueRouter({ routes: [ { path: \u0026#39;/foo\u0026#39;, component: Foo, beforeEnter: (to, from, next) =\u0026gt; { // ...  } } ] }) // vue-router 4 function removeQueryParams(to) { if (Object.keys(to.query).length) return { path: to.path, query: {}, hash: to.hash } } function removeHash(to) { if (to.hash) return { path: to.path, query: to.query, hash: \u0026#39;\u0026#39; } } const routes = [ { path: \u0026#39;/users/:id\u0026#39;, component: UserDetails, beforeEnter: [removeQueryParams, removeHash], }, { path: \u0026#39;/about\u0026#39;, component: UserDetails, beforeEnter: [removeQueryParams], }, ] 迁移成本低 Vue Router 4 主要致力于于在改善现有 Router 的同时保持非常相似的 API，如果你已经很上手旧版的 Vue Router 了，那你的迁移会做的很顺利，可以查看文档中的完整迁移指南。\n展望未来 在过去的几个月中，Vue Router 一直稳定而且好用，现在它可以做些更好玩的事儿了：\n 使用现有工具（Vetur，Vite，Devtools 等）得到更好的开发体验。 与 Suspense 等现代功能更好地集成。 RFCs 和社区共同探讨出更好用的 API。 开发更轻型的版本。  Breaking Changes(partial) New history option to replace mode The mode: \u0026lsquo;history\u0026rsquo; option has been replaced with a more flexible one named history. Depending on which mode you were using, you will have to replace it with the appropriate function:\n \u0026ldquo;history\u0026rdquo;: createWebHistory() \u0026ldquo;hash\u0026rdquo;: createWebHashHistory() \u0026ldquo;abstract\u0026rdquo;: createMemoryHistory()  Here is a full snippet:\nimport { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39; // there is also createWebHashHistory and createMemoryHistory  createRouter({ history: createWebHistory(\u0026#39;/base-directory/\u0026#39;), routes: [], }) Missing required params on named routes Pushing or resolving a named route without its required params will throw an error:\n// given the following route: const routes = [{ path: \u0026#39;/users/:id\u0026#39;, name: \u0026#39;user\u0026#39;, component: UserDetails }] // Missing the `id` param will fail router.push({ name: \u0026#39;user\u0026#39; }) router.resolve({ name: \u0026#39;user\u0026#39; }) 参考资料：\nVue Router 3.0 文档 Vue Router 4.0 release log\nVue Router 4.0 doc\nVue Router Migration Vue Router4 dynamic routing Routes' Matching Syntax router-scroll-position Path Ranker vue-router-next GitHub repo\n","date":"2020-12-13T19:23:26+08:00","image":"https://observerzq.github.io/ObzerverZQ.github.io/p/vue-router-4.0%E7%89%B9%E6%80%A7%E7%AE%80%E4%BB%8B/cover_hu0a3f1163de68d0b9471979ebf0ecf11e_32400_120x120_fill_q75_box_smart1.jpg","permalink":"https://observerzq.github.io/ObzerverZQ.github.io/p/vue-router-4.0%E7%89%B9%E6%80%A7%E7%AE%80%E4%BB%8B/","title":"Vue Router 4.0特性简介"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://observerzq.github.io/ObzerverZQ.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://observerzq.github.io/ObzerverZQ.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]