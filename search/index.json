[{"content":"事件模型 不论是浏览器还是Node.js，都有自己的事件模型，它们都是事件驱动的，即依靠事件来维持运行。 现在比较推荐的绑定事件的方法是addEventListener：\ntarget.addEventListener(type, listener[, options]); target.addEventListener(type, listener[, useCapture]); target.addEventListener(type, listener[, useCapture, wantsUntrusted ]); // Gecko/Mozilla only 旧版本的第三个参数是bool，表示是否是捕获阶段，默认是false，即默认为冒泡阶段。新版本是一个对象，其中有capture（和上面功能一样），passive和once。once用来执行是否只执行一次，passive如果被指定为true, 表示永远不会执行preventDefault(),这在实现丝滑柔顺的滚动的效果中很重要。Improving scrolling performance with passive listeners\n框架中的事件 框架中的事件 实际上，我们现在大多数情况都是用框架来写代码，因此上面的情况其实在现实中是非常少见的，我们更多看到的是框架封装好的事件，比如React的合成事件，感兴趣的可以看下这几篇文章。\n React SyntheticEvent Vue和React的优点分别是什么？两者的最核心差异对比是什么？  虽然我们很少时候会接触到原生的事件，但是了解一下事件对象，事件机制，事件代理等还是很有必要的，因为框架的事件系统至少在这方面还是一致的，这些内容我们接下来就会讲到。\n事件对象 function handleClick(e: Event) { // ... } 这个e就是事件对象，它包含一些重要属性和方法：\n 属性   target x, y等位置信息 timeStamp eventPhase   方法   preventDefault 用于阻止浏览器的默认行为，比如a标签会默认进行跳转，form会默认校验并发送请求到action指定的地址等 stopPropagation 用于阻止事件的继续冒泡行为，后面讲事件传播的时候会提到。  事件循环 事件指的是其所处理的对象就是事件本身，每一个浏览器都至少有一个事件循环，一个事件循环至少有一个任务队列。循环指的是其永远处于一个“无限循环”中。不断将注册的回调函数推入到执行栈。 一段JS代码，需要被编译成机器可理解并执行的指令，这就依赖JS引擎。而V8引擎中，有两个核心组成，即执行栈和堆。执行栈中存放正在执行的代码段，堆中存放变量的值。以一段简单代码为例：\nfunction c() {} function b() { c(); } function a() { b(); }a(); 代码执行的过程可以用动图表示：   call stack \nDOM和Web API JS对应的ECMA规范，V8只有堆和栈，用来实现ECMA规范，它与DOM（文档对象模型，其提供了一系列可以供JS调用的接口）、Web API、事件循环等执行环境如浏览器包含的内容不相关。 JS执行栈与渲染线程互相阻塞，为的是避免并行时JS获取DOM信息之后对DOM进行操作，而DOM本身同时也发生了变化，这样就会导致错乱和冲突。\n单线程同步、多线程同步、异步 fetchUserInfoSync().then(doSomethingA); // 1s fetchMyArcticlesSync().then(doSomethingB);// 3s fetchMyFriendsSync().then(doSomethingC);// 2s 在单线程的情况下，由于JS与渲染线程互相阻塞，因此发出三个接口异步请求时后续代码都被阻塞，数据需要耗时6s，这显然是不可接受的； 在多线程的情况下，最理想状态下需要耗时3s，但是因为三个线程都可以访问DOM和堆内存，很可能造成冲突，若要避免冲突就要设计锁🔒，这样会导致代码模型更加复杂，耗时必然大于3s； 在异步的情况下，就涉及到事件循环。\n事件循环如何实现异步 事件循环在浏览器和NodeJs中都是用于调度的，它决定了V8什么时候执行什么代码。V8只是负责JS代码的解析和执行，其他一概不知。 浏览器或者NodeJS中触发事件之后，到事件的监听函数被V8执行这个时间段的所有工作都是事件循环在起作用。 我们来小结一下：\n对于V8来说，它有： 调用栈（call stack） 这里的单线程指的是只有一个call stack。只有一个call stack 意味着同一时间只能执行一段代码。\n堆（heap） 对于浏览器运行环境来说： WEB API DOM API 任务队列 事件来触发事件循环进行流动\n事件循环之所以可以实现异步，就是将类似setTimeout等异步执行的代码注册/绑定的回调函数存起来，后面再将任务推入执行栈中。如图所示：\nfunction c() {} function b() { c(); } function a() { setTimeout(b, 2000) } a();   setTimeout \n加入用户交互之后，可见示例： http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\nsetTimeout代码执行后会将回调函数放入Web API中，计时结束后注册的回调函数会插入Callback queue中，待到Call Stack为空即浏览器空闲的时候时排队插入Call Stack被执行。\n加入宏任务和微任务，来看一个更复杂的例子：\nconsole.log(1) setTimeout(() =\u0026gt; { console.log(2) }, 0) Promise.resolve().then(() =\u0026gt; { return console.log(3) }).then(() =\u0026gt; { console.log(4) }) console.log(5) 上面的代码会输出：1、5、3、4、2。 如果你想要非常严谨的解释可以参考 whatwg 对其进行的描述 cievent-loop-processing-model。\n下面我会对其进行一个简单的解释。\n 浏览器首先执行宏任务，也就是我们script（仅仅执行一次） 完成之后检查是否存在微任务，然后不停执行，直到清空队列 执行宏任务 其中：  宏任务主要包含：setTimeout、setInterval、setImmediate、I/O、UI交互事件\n微任务主要包含：Promise、process.nextTick、MutaionObserver 等\n  事件循环示意图 \n有了这个知识，我们不难得出上面代码的输出结果。\n由此我们可以看出，宏任务\u0026amp;微任务只是实现异步过程中，我们对于信号的处理顺序不同而已。如果我们不加区分，全部放到一个队列，就不会有宏任务\u0026amp;微任务。这种人为划分优先级的过程，在某些时候非常有用。\n加入执行上下文栈 说到执行上下文，就不得不提到浏览器执行JS函数其实是分两个过程的。一个是创建阶段Creation Phase，一个是执行阶段Execution Phase。\n同执行栈一样，浏览器每遇到一个函数，也会将当前函数的执行上下文栈推入栈顶。\nfunction a(num) { function b(num) { function c(num) { const n = 3 console.log(num + n) } c(num); } b(num); } a(1); 遇到上面的代码。 首先会将a的压入执行栈，我们开始进行创建阶段Creation Phase， 将a的执行上下文压入栈。然后初始化a的执行上下文，分别是VO，ScopeChain（VO chain）和 This。 从这里我们也可以看出，this其实是动态决定的。VO指的是variables, functions 和 arguments。 并且执行上下文栈也会同步随着执行栈的销毁而销毁。\n伪代码表示：\nconst EC = { \u0026#39;scopeChain\u0026#39;: { }, \u0026#39;variableObject\u0026#39;: { }, \u0026#39;this\u0026#39;: { } }   execution context stack  我们来重点看一下ScopeChain(VO chain)。如上图的执行上下文大概长这个样子，伪代码：\nglobal.VO = { a: pointer to a(), scopeChain: [global.VO] } a.VO = { b: pointer to b(), arguments: { 0: 1 }, scopeChain: [a.VO, global.VO] } b.VO = { c: pointer to c(), arguments: { 0: 1 }, scopeChain: [b.VO, a.VO, global.VO] } c.VO = { arguments: { 0: 1 }, n: 3 scopeChain: [c.VO, b.VO, a.VO, global.VO] } 引擎查找变量的时候，会先从VOC开始找，找不到会继续去VOB…，直到GlobalVO，如果GlobalVO也找不到会返回Referrence Error，整个过程类似原型链的查找。\n值得一提的是，JS是词法作用域，也就是静态作用域。换句话说就是作用域取决于代码定义的位置，而不是执行的位置，这也就是闭包产生的本质原因。 如果上面的代码改造成下面的：\nfunction c() {} function b() {} function a() {} a() b() c() // 或者这种 function c() {} function b() { c(); } function a() { b(); } a(); 其执行上下文栈虽然都是一样的，但是其对应的scopeChain则完全不同，因为函数定义的位置发生了变化。拿上面的代码片段来说,c.VO会变成这样：\nc.VO = { scopeChain: [c.VO, global.VO] } 也就是说其再也无法获取到a和b中的VO了。 一图总结本文如下：   v8_engine.jpg \n参考资料： 《一文看懂浏览器事件循环》\n","date":"2020-12-28T12:03:26+08:00","image":"https://observerzq.github.io/ObzerverZQ.github.io/p/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%B8%80%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/cover_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://observerzq.github.io/ObzerverZQ.github.io/p/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%B8%80%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/","title":"前端知识汇总（一）：浏览器事件模型和事件循环"},{"content":"项目结构优化 Vue Router 现在分为三个模块：\n History 实现： 处理地址栏，并且特定于 Vue Router 运行的环境（节点，浏览器，移动设备等） Router 匹配器：处理类似 /users/:id 的路由解析和优先级处理。 Router: 将一切连接在一起，并处理路由特定功能，例如导航守卫。  |____types | |____typeGuards.ts // 对route进行校验 | |____index.ts // type和interface |____router.ts // connects everything together and handle routing specific features like navigation guards |____RouterLink.ts |____errors.ts |____globalExtensions.ts |____injectionSymbols.ts |____utils | |____callbacks.ts | |____README.md | |____index.ts | |____env.ts |____devtools.ts |____location.ts |____matcher // handles the parsing of routes /users/:id and its ranking | |____pathTokenizer.ts // path解析器，生成token数组tokenizePath | |____pathMatcher.ts // 提供createRouteRecordMatcher方法供index调用，在addRoute时创建matcher | |____pathParserRanker.ts // 对每一个setment计算score | |____types.ts // 定义RouteRecordNormalized作为RouteRecord | |____index.ts // 定义并实现RouterMatcher，内部定义matcherMap路由映射；对RouteRecord、RouteProps进行normalize |____warning.ts |____RouterView.ts |____scrollBehavior.ts |____history // handles the address bar and is specific to the environment Vue Router runs on (Node, Browser, Mobile, etc) | |____common.ts // 列举一些通用的用于History API的interface、type、enum和在两个模式下通用的方法 | |____hash.ts // hash模式，createWebHashHistory | |____html5.ts // html5模式，createWebHistory | |____memory.ts // abstract模式，createMemoryHistory, 记录路由队列、监听器和当前位置，实现router方法。如果发现没有浏览器的 API，路由会自动强制进入这个模式 |____global.d.ts |____useApi.ts |____index.ts |____query.ts |____encoding.ts |____navigationGuards.ts // 路由守卫 // src/history/html5.ts /** * Creates a normalized history location from a window.location object * @param location - */ function createCurrentLocation( base: string, location: Location ): HistoryLocation {} function useHistoryListeners(base: string, historyState: ValueContainer\u0026lt;StateEntry\u0026gt;, currentLocation: ValueContainer\u0026lt;HistoryLocation\u0026gt;, replace: RouterHistory[\u0026#39;replace\u0026#39;] ){} function useHistoryStateNavigation(base: string) {} export function createWebHistory(base?: string): RouterHistory {} 动态路由 Vue Router3 { // 会匹配所有路径 path: '*' } { // 会匹配以 `/user-` 开头的任意路径 path: '/user-*' } vue-router 3使用 path-to-regexp 作为路径匹配引擎。 有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。当使用通配符路由时，必须确保路由的顺序是正确的，也就是说含有通配符的路由应该放在最后。路由 { path: \u0026lsquo;*\u0026rsquo; } 通常用于客户端 404 错误。如果你使用了History 模式，请确保正确配置你的服务器。\nVue Router 4 不再使用path-to-regexp，而是使用自己的转化系统。新增了有自动优先级排名的高级路径解析功能，用户新现在可以以随意的顺序定义路由，因为 Router 会根据 URL 字符串表示来猜测应该匹配的路由。 举个例子来说，你同时写了 /users 和 /:w+ 这两个路由：\nconst routes = [ { path: \u0026#39;/users\u0026#39;, Component: Users }, { path: \u0026#39;/:w+\u0026#39;, Component: NotFound } ] 那么你当然希望在输入 /users 这个更精确的路径的时候，走上面的规则，而下面则作为兜底规则。在旧版的 Vue Router 中需要通过路由声明的顺序来保证这个行为，而新版则无论你怎样放置，都会按照得分系统来计算该匹配哪个路由。\n甚至专门有 Path Ranker这个网页来帮助你计算路由的优先级得分。 简单来说，越明确的路由排名越高，越模糊则反之，无关顺序，非常有意思。\n改进后的导航系统 新的导航系统更加具有一致性，它改善了滚动行为的体验，使其更加接近原生浏览器的行为。 它还为用户提供了有关导航状态的几乎更多信息，用户可以用这些信息，通过 ProgressBar和 Modal之类的全局 UI 元素让用户的体验变得更好。 改进动机：\n 先前的selector默认使用document.querySelector。但是这个API不支持 /^#\\d/即以数字开头的id元素，所以vue3团队决定针对这种参数使用getElementById。但是这个API仍不适用于选择某个id元素内的某个class的元素，比如#1one .container。诸如此类的情况都会导致vue-router抛出document.querySelector failed，让用户产生困惑。  { x: number, y: number } { selector: string, offset? : { x: number, y: number }} 基于Element.scrollTo的参数配置ScrollToOptions，vue-router 4进行了改造  // vue router 3 scrollBehavior (to, from, savedPosition) { if (to.hash) { return { selector: to.hash } // return { x: 0, y: 200 }  } } // native JS element.scrollTo({ top: 100, left: 100, behavior: \u0026#39;smooth\u0026#39; }); // vue router 4 const router = new Router({ scrollBehavior(to, from, savedPosition) { // scroll to id `can~contain-special\u0026gt;characters` + 200px  return { el: \u0026#39;#can~contain-special\u0026gt;characters\u0026#39; // top relative offset  top: 200 // instead of `offset: { y: 200 }`  } } }) 更强大的 Devtools 多亏了新的Vue Devtools，Vue Router 能够和浏览器进行以下更高级的整合。\n 时间轴记录路由变化：   Timeline  完整 route 目录，能够帮助你轻松进行调试：   Routes directory   更好的路由守卫 beforeEach // BAD router.beforeEach((to, from, next) =\u0026gt; { if (to.name !== \u0026#39;Login\u0026#39; \u0026amp;\u0026amp; !isAuthenticated) next({ name: \u0026#39;Login\u0026#39; }) // 如果用户未能验证身份，则 `next` 会被调用两次  next() }) // GOOD router.beforeEach((to, from, next) =\u0026gt; { if (to.name !== \u0026#39;Login\u0026#39; \u0026amp;\u0026amp; !isAuthenticated) next({ name: \u0026#39;Login\u0026#39; }) else next() }) 确保 next 函数在任何给定的导航守卫中都被严格调用一次。它可以出现多于一次，但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错。 和next说拜拜，现在确认跳转不需要再手动执行这个函数了，而是根据你的返回值来决定行为。同样支持异步返回 Promise。\n现在的路由守卫 API 更加友好且合理了，可以完美利用 async await 做异步处理，比如这样：\nrouter.beforeEach(async (to, from) =\u0026gt; { // canUserAccess() returns `true` or `false`  return await canUserAccess(to) }) 路由独享的守卫 现在beforeEnter支持传入函数数组，便于复用，例如跳转到某个路由后自动去除所有query和hash\n// vue-router 3 const router = new VueRouter({ routes: [ { path: \u0026#39;/foo\u0026#39;, component: Foo, beforeEnter: (to, from, next) =\u0026gt; { // ...  } } ] }) // vue-router 4 function removeQueryParams(to) { if (Object.keys(to.query).length) return { path: to.path, query: {}, hash: to.hash } } function removeHash(to) { if (to.hash) return { path: to.path, query: to.query, hash: \u0026#39;\u0026#39; } } const routes = [ { path: \u0026#39;/users/:id\u0026#39;, component: UserDetails, beforeEnter: [removeQueryParams, removeHash], }, { path: \u0026#39;/about\u0026#39;, component: UserDetails, beforeEnter: [removeQueryParams], }, ] 迁移成本低 Vue Router 4 主要致力于于在改善现有 Router 的同时保持非常相似的 API，如果你已经很上手旧版的 Vue Router 了，那你的迁移会做的很顺利，可以查看文档中的完整迁移指南。\n展望未来 在过去的几个月中，Vue Router 一直稳定而且好用，现在它可以做些更好玩的事儿了：\n 使用现有工具（Vetur，Vite，Devtools 等）得到更好的开发体验。 与 Suspense 等现代功能更好地集成。 RFCs 和社区共同探讨出更好用的 API。 开发更轻型的版本。  Breaking Changes(partial) New history option to replace mode The mode: \u0026lsquo;history\u0026rsquo; option has been replaced with a more flexible one named history. Depending on which mode you were using, you will have to replace it with the appropriate function:\n \u0026ldquo;history\u0026rdquo;: createWebHistory() \u0026ldquo;hash\u0026rdquo;: createWebHashHistory() \u0026ldquo;abstract\u0026rdquo;: createMemoryHistory()  Here is a full snippet:\nimport { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39; // there is also createWebHashHistory and createMemoryHistory  createRouter({ history: createWebHistory(\u0026#39;/base-directory/\u0026#39;), routes: [], }) Missing required params on named routes Pushing or resolving a named route without its required params will throw an error:\n// given the following route: const routes = [{ path: \u0026#39;/users/:id\u0026#39;, name: \u0026#39;user\u0026#39;, component: UserDetails }] // Missing the `id` param will fail router.push({ name: \u0026#39;user\u0026#39; }) router.resolve({ name: \u0026#39;user\u0026#39; }) 参考资料：\nVue Router 3.0 文档 Vue Router 4.0 release log\nVue Router 4.0 doc\nVue Router Migration Vue Router4 dynamic routing Routes' Matching Syntax router-scroll-position Path Ranker vue-router-next GitHub repo\n","date":"2020-12-13T19:23:26+08:00","image":"https://observerzq.github.io/ObzerverZQ.github.io/p/vue-router-4.0%E7%89%B9%E6%80%A7%E7%AE%80%E4%BB%8B/cover_hu0a3f1163de68d0b9471979ebf0ecf11e_32400_120x120_fill_q75_box_smart1.jpg","permalink":"https://observerzq.github.io/ObzerverZQ.github.io/p/vue-router-4.0%E7%89%B9%E6%80%A7%E7%AE%80%E4%BB%8B/","title":"Vue Router 4.0特性简介"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://observerzq.github.io/ObzerverZQ.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://observerzq.github.io/ObzerverZQ.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]