<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Observer的小家</title>
    <link>https://observerzq.github.io/ObzerverZQ.github.io/post/</link>
    <description>Recent content in Posts on Observer的小家</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Feb 2021 19:11:26 +0800</lastBuildDate><atom:link href="https://observerzq.github.io/ObzerverZQ.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript实现常见排序算法</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/javascript%E5%AE%9E%E7%8E%B0%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 26 Feb 2021 19:11:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/javascript%E5%AE%9E%E7%8E%B0%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>冒泡排序 基本思路：从左至右遍历数组，取一个指针指向第一个元素，与下一个元素比较，若该元素更大则前后交换位置，然后指针取下一位，与后一位进行比较，继续这样的循环，这样一轮下来会使得最大值放在数组的末尾，类似吐泡泡一样。之后重新开始循环上述过程，将第二大的元素放在倒数第二位。
function bubbleSort(array) { let isSorted = true; let len = array.length; for (let i = 0; i &amp;lt; len; i ++) { for (let j = 0; j &amp;lt; len - i - 1; j++) { if (array[j] &amp;gt; array[j +1 ]) { [array[j], array[j + 1]] = [array[j + 1], array[j]]; isSorted = false; } } if (isSorted) { break; } } return array; } 选择排序 基本思路：从左至右遍历数组，比较一圈后得到最小值的索引，与索引0的元素交换位置；接着从第2位开始循环上述操作，将第二小的元素放在索引为1的位置，以此类推。每次遍历的时间为O(n)，这样的时间复杂度为O(n2)。</description>
    </item>
    
    <item>
      <title>Node.js 常见问题15条</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/node.js-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%9815%E6%9D%A1/</link>
      <pubDate>Mon, 22 Feb 2021 19:23:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/node.js-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%9815%E6%9D%A1/</guid>
      <description>临阵磨枪，不快也光。对于成功的编程面试来说，准备和知识面一样重要。准备使你有信心参加面试，而不用担心莫名的紧张情绪。如果第一次参加编程面试，这一点尤其重要。
为帮助 Node.js 开发人员更好的面试，我列出了 15 个常见的 Node.js 和网络开发相关的面试问题。
在本文中，我们将重点讨论 Node.js 相关问题。但是，请记住 JavaScript 问题在 Node.js 面试中也经常问到，所以准备一些对你来说没什么坏处。不久前我们写了一篇关于常见 JavaScript 面试问题的帖子，涵盖了所有这些基础。
https://livecodestream.dev/post/20-common-javascript-interview-questions/
现在，让我们深入了解面试中可能会问到的 Node.js 问题。
 Node.js 与 JavaScript 有什么不同?    Image 
什么时候用 Node.js？ Node.js 是异步的、事件驱动的、非阻塞的和单线程的，使得它成为开发下面应用程序的完美候选：    实时应用程序，如聊天和提供实时更新的应用程序
  将视频或其他多媒体内容流式传输给大量观众的流式应用程序
  其他 I/O 密集型应用程序，如协作平台
  遵循微服务架构的网络后端
  然而，Node.js 的特性使得它对于其他类型的应用程序来说不是一个理想的选择。执行 CPU 密集型任务的应用程序（如复杂的数学计算）在使用 CPU 时表现不佳，因为 Node.js 是单线程的。
EventEmitter 做了什么？ Node.js 中任何对象发出的事件都是 EventEmitter 类的实例，就像 http 模块。  所有 EventEmitter 类都可以使用 eventEmitter.</description>
    </item>
    
    <item>
      <title>前端知识汇总（二）：网络</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%BA%8C%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Tue, 12 Jan 2021 12:20:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%BA%8C%E7%BD%91%E7%BB%9C/</guid>
      <description>WebSocket 工作在七层（或者四层）中的哪一层？和 HTTP 是什么关系？ 是基于 UDP 的还是 TCP 的？ TCP 为什么是三次握手？为什么是四次挥手？ CDN 的工作原理是什么？ 运营商劫持是什么？如何防范？ HTTPS 一定是安全的么？如果不是，那么在什么情况下是不安全的？ 如何劫持 HTTPS 请求。 比如你需要抓 HTTPS 的包，怎么做？ 支付宝和微信的离线支付是怎么做的？ Token 和 Cookie 有什么区别和联系呢？其分别是为了解决什么样的事情？ WebSocket 需要 cookie 么？为什么？ WebSocket 是怎么实现点对点通信和广播通信的？ 如果访问你的 APP 很慢，你自己无法重现。 初步定位到网络问题， 那么你怎么能具体定位到问题呢？ traceroute, Ping 的原理是什么？ 192.168.0.1 和 192.168.1.1 如何通信？ DNS 是如何泄漏个人隐私的？怎么防范？ 从网络协议模型（七层 or 四层）的角度分析一下，浏览器访问 192.168.3.4:8088 的具体过程。</description>
    </item>
    
    <item>
      <title>前端知识汇总（一）：浏览器事件模型和事件循环</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%B8%80%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Mon, 28 Dec 2020 12:03:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%B8%80%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</guid>
      <description>事件模型 不论是浏览器还是Node.js，都有自己的事件模型，它们都是事件驱动的，即依靠事件来维持运行。 现在比较推荐的绑定事件的方法是addEventListener：
target.addEventListener(type, listener[, options]); target.addEventListener(type, listener[, useCapture]); target.addEventListener(type, listener[, useCapture, wantsUntrusted ]); // Gecko/Mozilla only 旧版本的第三个参数是bool，表示是否是捕获阶段，默认是false，即默认为冒泡阶段。新版本是一个对象，其中有capture（和上面功能一样），passive和once。once用来执行是否只执行一次，passive如果被指定为true, 表示永远不会执行preventDefault(),这在实现丝滑柔顺的滚动的效果中很重要。Improving scrolling performance with passive listeners
框架中的事件 框架中的事件 实际上，我们现在大多数情况都是用框架来写代码，因此上面的情况其实在现实中是非常少见的，我们更多看到的是框架封装好的事件，比如React的合成事件，感兴趣的可以看下这几篇文章。
 React SyntheticEvent Vue和React的优点分别是什么？两者的最核心差异对比是什么？  虽然我们很少时候会接触到原生的事件，但是了解一下事件对象，事件机制，事件代理等还是很有必要的，因为框架的事件系统至少在这方面还是一致的，这些内容我们接下来就会讲到。
事件对象 function handleClick(e: Event) { // ... } 这个e就是事件对象，它包含一些重要属性和方法：
 属性   target x, y等位置信息 timeStamp eventPhase   方法   preventDefault 用于阻止浏览器的默认行为，比如a标签会默认进行跳转，form会默认校验并发送请求到action指定的地址等 stopPropagation 用于阻止事件的继续冒泡行为，后面讲事件传播的时候会提到。  事件循环 事件指的是其所处理的对象就是事件本身，每一个浏览器都至少有一个事件循环，一个事件循环至少有一个任务队列。循环指的是其永远处于一个“无限循环”中。不断将注册的回调函数推入到执行栈。 一段JS代码，需要被编译成机器可理解并执行的指令，这就依赖JS引擎。而V8引擎中，有两个核心组成，即执行栈和堆。执行栈中存放正在执行的代码段，堆中存放变量的值。以一段简单代码为例：
function c() {} function b() { c(); } function a() { b(); }a(); 代码执行的过程可以用动图表示：   call stack</description>
    </item>
    
    <item>
      <title>Vue Router 4.0特性简介</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/vue-router-4.0%E7%89%B9%E6%80%A7%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 13 Dec 2020 19:23:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/vue-router-4.0%E7%89%B9%E6%80%A7%E7%AE%80%E4%BB%8B/</guid>
      <description>项目结构优化 Vue Router 现在分为三个模块：
 History 实现： 处理地址栏，并且特定于 Vue Router 运行的环境（节点，浏览器，移动设备等） Router 匹配器：处理类似 /users/:id 的路由解析和优先级处理。 Router: 将一切连接在一起，并处理路由特定功能，例如导航守卫。  |____types | |____typeGuards.ts // 对route进行校验 | |____index.ts // type和interface |____router.ts // connects everything together and handle routing specific features like navigation guards |____RouterLink.ts |____errors.ts |____globalExtensions.ts |____injectionSymbols.ts |____utils | |____callbacks.ts | |____README.md | |____index.ts | |____env.ts |____devtools.ts |____location.ts |____matcher // handles the parsing of routes /users/:id and its ranking | |____pathTokenizer.ts // path解析器，生成token数组tokenizePath | |____pathMatcher.</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/markdown-syntax-guide/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/markdown-syntax-guide/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
