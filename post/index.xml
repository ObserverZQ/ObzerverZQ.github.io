<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Observer的小家</title>
    <link>https://observerzq.github.io/ObzerverZQ.github.io/post/</link>
    <description>Recent content in Posts on Observer的小家</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Mar 2021 12:20:26 +0800</lastBuildDate><atom:link href="https://observerzq.github.io/ObzerverZQ.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从0开始实现React</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0react/</link>
      <pubDate>Tue, 30 Mar 2021 12:20:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0react/</guid>
      <description>参考：https://pomb.us/build-your-own-react/ 基于React 16.8实现，因而可以使用hook，不再书写使用过去的class相关的代码。
实现React的基本思路如下： Step I: The createElement Function 第一步：创建节点 Step II: The render Function 第二步：渲染 Step III: Concurrent Mode 第三步：concurrent模式 Step IV: Fibers 第四步：Fiber“纤维” Step V: Render and Commit Phases 第五步： 渲染和Commit阶段 Step VI: Reconciliation 第六步：调和 Step VII: Function Components 第七步：函数组件 Step VIII: Hooks 第八步：Hooks
第0步：回顾 下面是最简单的几行React代码：
const element = &amp;lt;h1 title=&amp;#34;foo&amp;#34;&amp;gt;Hello&amp;lt;/h1&amp;gt; const container = document.getElementById(&amp;#34;root&amp;#34;) ReactDOM.render(element, container) // 把element插入到页面的DOM节点container中 第一行代码替换成vanilla（香草？）JS代码，变化如下：
// JSX 通过Babel编译成JS // 一般转换过程都很简单：调用createElement把tag内的代码替换掉，传入tag名，属性和子节点作为参数 const element = &amp;lt;h1 title=&amp;#34;foo&amp;#34;&amp;gt;Hello&amp;lt;/h1&amp;gt;  // ========transformation========= const element = React.</description>
    </item>
    
    <item>
      <title>常见面试题解析文章集锦</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90%E6%96%87%E7%AB%A0%E9%9B%86%E9%94%A6/</link>
      <pubDate>Mon, 15 Mar 2021 12:20:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90%E6%96%87%E7%AB%A0%E9%9B%86%E9%94%A6/</guid>
      <description>浏览器从输入URL到显示页面中间发生的事情  一文摸透从输入URL到页面渲染的过程
一言以概之：浏览器主进程 -&amp;gt; 网络进程 -&amp;gt; 渲染进程 -&amp;gt; GPU进程 -&amp;gt; 浏览器主进程
 HTTP协议相关、网络攻击 状态码、首部、请求方法、状态管理、身份认证、身份认证、长连接与短连接、代理网关与隧道、HTTP缓存、内容协商机制、断点续传和多线程下载、HTTPS、WebSocket、SPDY、HTTP 2.0、HTTP 3.0、Web安全 详解HTTP协议
URI包含URL、URN或同时具备locators和name特性的东西。URL给出了访问机制http ftp telnet等。URI唯一标识了身份。
  请求首部：
 Accept Accet-Charset Accept-Encoding Accept-Language If-Match === ETag 200 If-Modified-Since &amp;lt; Last Modified 200 === Last Modified 304 If-None-Match !== ETag 200 If-Range === ETag/date 206 !== ETag/date 200 配合Range(Etag/date)使用 Referer: 告诉服务器从URI从哪个页面发起  响应首部：
 Age 缓存在源服务器存在多久了 ETag 资源实体标识 Location 3xx 重定向用  通用首部：
 Cache-Control Connection Date     浏览器从输入URL到显示页面中间发生的事情     浏览器从输入URL到显示页面中间发生的事情     浏览器从输入URL到显示页面中间发生的事情     浏览器从输入URL到显示页面中间发生的事情    vue 和 react 设计思路 发展历程 vue1 react15 diff平级 vue2 react16 fiber vue3 &amp;amp; react17</description>
    </item>
    
    <item>
      <title>flex布局</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/flex%E5%B8%83%E5%B1%80/</link>
      <pubDate>Tue, 09 Mar 2021 10:14:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/flex%E5%B8%83%E5%B1%80/</guid>
      <description>flex: flex-grow flex-shrink flex-basis flex-grow 属性定义项目的放大比例，默认值为0，不放大，x为放大x倍 flex-shrink 属性定义了项目的缩小比例，默认值为1，空间不足即缩小，0是不缩小 flex-basis 定义了在分配多余空间之前，项目占据的主轴空间（main size）。默认值为auto，项目默认的大小
   语法 等于 描述 备注     flex: initial flex: 0 1 auto 容器默认不放大，尺寸不足会缩小，尺寸自适应内容 初始值   flex: 0 flex: 0 1 0% 默认放大，尺寸不足会缩小，大小支持0，即最小的内容尺寸 场景少   flex: none flex: 0 0 auto 默认不放大，尺寸不足也不缩小，子项的尺寸就是父级的尺寸时使用    flex: 1 flex: 1 1 0% 可以弹性变大，也可以弹性缩小，尺寸不足时优先最小化内容    flex: auto flex: 1 1 auto 可以弹性变大，也可以弹性缩小，尺寸不足时优先最大化内容 基于内容动态匹配    参考资料：</description>
    </item>
    
    <item>
      <title>Web UI 自动化测试实践</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/web-ui-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 09 Mar 2021 10:14:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/web-ui-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/</guid>
      <description>Vue的缺点： 全局的this Vue 2 html、data声明、涉及方法代码片段分散，可复用性差
今日份吐血： 需要重复复制相同逻辑代码，功能代码分散 另一个页面需要使用，则需要复制相应的type action enum，
上下文丢失 Vue 的单文件组件，使用 、对代码进行分割，直接导致的问题就是上下文丢失。 举个例子，你封装了一些常用的函数，在 Vue 文件中 import 进来。你这个函数能在 template 中直接使用吗？ 不能。 需要在data或者method中中再次声明。 或者用namespace直接定义好action mutation
模板分割 好的代码组织能将常变与不变的部分进行分割解耦
Vue 的模板严重限制了这一点。 举个例子，前端有个下拉菜单，功能不断增加，而且对于不同的人要显示不同菜单（权限管理）。在 Vue 中，为了实现 html 代码（绑定在 template 中）的分割，你只能再搞一个组件。在 React 中，可以直接这样写：
const menu = &amp;lt;div&amp;gt;abc&amp;lt;div&amp;gt;; 可单独做一个组件（低开销函数组件），也可当做变量，放在当前代码中。相对灵活很多。 SX 手写 render 渲染函数自带下面的优势
 完整的 js 功能来构建视图页面，可以使用临时变量、js 自带的控制流、以及直接引用当前 js 作用域中的值 开发工具对 jsx 的支持比现有 vue 模板先进（linting、typescript、编译器自动补全）  参考资料：
为什么我们放弃了 Vue？Vue 和 React 深度对比</description>
    </item>
    
    <item>
      <title>Web UI 自动化测试实践</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/web-ui-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 08 Mar 2021 10:54:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/web-ui-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/</guid>
      <description>Selenium：可以直接在浏览器中运行，目前使用版本v3，最高版本v4（不稳定） 安装、运行：http://www.testclass.net/selenium_python/install-selenium 可能遇到浏览器驱动问题，https://blog.csdn.net/tymatlab/article/details/78649727 http://www.testclass.net/selenium_python/selenium3-browser-driver chrome驱动下载地址：https://sites.google.com/a/chromium.org/chromedriver/home
元素定位：http://www.testclass.net/selenium_python/find-element 对项目元素设置不同的classsname、css选择器，即可通过以下方法获取到该元素
dr.find_element_by_class_name(&amp;#34;s_ipt&amp;#34;) dr.find_element_by_css_selector(&amp;#34;#kw&amp;#34;) dr.find_element_by_css_selector(&amp;#34;[name=wd]&amp;#34;) dr.find_element_by_css_selector(&amp;#34;.s_ipt&amp;#34;) dr.find_element_by_css_selector(&amp;#34;html &amp;gt; body &amp;gt; form &amp;gt; span &amp;gt; input&amp;#34;) dr.find_element_by_css_selector(&amp;#34;span.soutu-btn&amp;gt; input#kw&amp;#34;) dr.find_element_by_css_selector(&amp;#34;form#form &amp;gt; span &amp;gt; input&amp;#34;) 控制浏览器操作： http://www.testclass.net/selenium_python/control-browser
其余操作：包括鼠标事件、键盘事件、窗口切换、文件上传、关闭浏览器等 http://www.testclass.net/selenium_python
cd ~ // 进入根目录 vim .bash_profile // 创建或者打开该文件
// .bash_profile以及.bashrc以及.zshrc均输入以下内容 export M2_HOME=/Users/mtdp/project/apache-maven-3.6.3 // /Users/mtdp/project/apache-maven-3.6.3 这个路径是自己存放maven的路径 export M2=$M2_HOME/bin // 不动 export PATH=$M2:$PATH // 不动 export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home // 一般情况下只需要修改jdk版本号就好了，和自己安装的版本号一致，安装mvn和jdk后可以通过mvn -v查询到路径
// 保存后使用source命令 source .bash_profile/.bashrc/.zshrc
// java环境配置完成
// 修改maven的setting文件。进入maven安装目录打开conf下面的settings文件
 在自己的目录下新建java包存放文件夹，如maven_repostory，我的路径为/Users/mtdp/project/maven_repostory 打开settings.xml文件，修改localRepository路径  /Users/mtdp/project/maven_repostory// 改成自己的路径 meituan-nexus-releasesdeploymentdeployment123&amp;hellip; // 安装python，由于mac本来自带python2，但是如果使用不当可能会引起mac系统崩溃，因此我们使用python3 brew install python3 // 安装python3，如果没有安装brew，使用/bin/bash -c &amp;ldquo;$(curl -fsSL https://raw.</description>
    </item>
    
    <item>
      <title>JavaScript实现常见排序算法</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/javascript%E5%AE%9E%E7%8E%B0%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 26 Feb 2021 19:11:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/javascript%E5%AE%9E%E7%8E%B0%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>冒泡排序 基本思路：从左至右遍历数组，取一个指针指向第一个元素，与下一个元素比较，若该元素更大则前后交换位置，然后指针取下一位，与后一位进行比较，继续这样的循环，这样一轮下来会使得最大值放在数组的末尾，类似吐泡泡一样。之后重新开始循环上述过程，将第二大的元素放在倒数第二位。
function bubbleSort(array) { let isSorted = true; let len = array.length; for (let i = 0; i &amp;lt; len; i ++) { for (let j = 0; (j &amp;lt; len - i - 1); j++) { if (array[j] &amp;gt; array[j + 1]) { isSorted = false; [array[j], array[j + 1]] = [array[j + 1], array[j]]; } } if (isSorted) { break; } else { isSorted = true; } } return array; } 时间复杂度上，最好情况是O(n)，即数组已经完全排好序，后一个元素永远比前一个元素大，不需要冒泡，只需要遍历一次，平均和最坏情况是O(n2)。</description>
    </item>
    
    <item>
      <title>Node.js 常见问题15条</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/node.js-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%9815%E6%9D%A1/</link>
      <pubDate>Mon, 22 Feb 2021 19:23:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/node.js-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%9815%E6%9D%A1/</guid>
      <description>临阵磨枪，不快也光。对于成功的编程面试来说，准备和知识面一样重要。准备使你有信心参加面试，而不用担心莫名的紧张情绪。如果第一次参加编程面试，这一点尤其重要。
为帮助 Node.js 开发人员更好的面试，我列出了 15 个常见的 Node.js 和网络开发相关的面试问题。
在本文中，我们将重点讨论 Node.js 相关问题。但是，请记住 JavaScript 问题在 Node.js 面试中也经常问到，所以准备一些对你来说没什么坏处。不久前我们写了一篇关于常见 JavaScript 面试问题的帖子，涵盖了所有这些基础。
https://livecodestream.dev/post/20-common-javascript-interview-questions/
现在，让我们深入了解面试中可能会问到的 Node.js 问题。
 Node.js 与 JavaScript 有什么不同?    Image 
什么时候用 Node.js？ Node.js 是异步的、事件驱动的、非阻塞的和单线程的，使得它成为开发下面应用程序的完美候选：    实时应用程序，如聊天和提供实时更新的应用程序
  将视频或其他多媒体内容流式传输给大量观众的流式应用程序
  其他 I/O 密集型应用程序，如协作平台
  遵循微服务架构的网络后端
  然而，Node.js 的特性使得它对于其他类型的应用程序来说不是一个理想的选择。执行 CPU 密集型任务的应用程序（如复杂的数学计算）在使用 CPU 时表现不佳，因为 Node.js 是单线程的。
EventEmitter 做了什么？ Node.js 中任何对象发出的事件都是 EventEmitter 类的实例，就像 http 模块。  所有 EventEmitter 类都可以使用 eventEmitter.</description>
    </item>
    
    <item>
      <title>JI技巧</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/ji%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Tue, 12 Jan 2021 12:20:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/ji%E6%8A%80%E5%B7%A7/</guid>
      <description>自我介绍的模板 突出能力 ✅
突出兴趣 突出性格
之后！！！重要！！！！对自己进行总结+求职意向的说明
  申请岗位的理由，有自己的话复述一下岗位要求： 看好行业岗位前景/我的个人兴趣/非常适合发挥我的能力
  结合自己的介绍，阐述自己为什么适合这个岗位，总结匹配性 我过去的经历，已经储备了xx能力（重复一下具体能力名称），我自己也是一个xx的人（具体的性格特点价值观） 我觉得xx的经历对我申请这个岗位有很大帮助（引导面试官后续询问亮点经历）。除了工作之外，我平时还喜欢xx，也对我申请这个岗位有帮助。（爱好、兴趣，能够说明你的性格特点价值观，切记匹配岗位要求）
  自我介绍要点： 3分钟串联经历，给经历做总结，最后重申自己为什么申请这个岗位，为什么适合这个岗位。
  详细介绍过往经历 面试官可能会问：详细介绍一下你在xx的工作经历？能具体介绍一下xx项目的过程吗？ ！！！拒绝流水账！！！重点是展示具体能力、工作方法和态度、特长 这里可以运用STAR原则 situation task action reuslt
(1) 情景 —— 这个情景有多重要？ 面试官会根据这个判断你是否收到重用。 可以增加以下表述： 我所在的这个组是公司当时重点发力的部门/公司主营业务部门； 我们这个项目当时是为了解决平台的新增xx需求
岗位如下三类，可以进行下下归类： 主营业务岗位/主营业务相关项目 —— 公司当下最重要的部门 创新业务线/创新项目 —— 公司的未来 业务核心支撑部门 —— 稳定性、持续性的部门
(2) 任务 —— 你的任务独特性是什么？ 任务的独特性能够通过过往经历更好地体现你的能力、性格、价值观。独特性主要分为以下三种： 独立完成型 —— 独自承担某项工作，要介绍细节 （能力认可） 横向对比型 —— 同样类型工作，和其他同事比，特色之处 （优势） 体现能力型 —— 对难点进行抽象，协调能力/短时间高强度/认真细致/快速学习
(3) 行动 —— 你工作的亮点是什么？ 亮点大致可以分为以下五种： 高举高打型 —— 专业、深度、超越同级别/年龄工作者的方法 努力拼搏型 —— 花时间、精力 独立思考型 —— 用和别人不同的方式 善用资源型 —— 解决问题，借助外部资源 克服困难型 —— 突出任务中的矛盾，体现自己能力</description>
    </item>
    
    <item>
      <title>前端知识汇总（二）：网络</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%BA%8C%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Tue, 12 Jan 2021 12:20:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%BA%8C%E7%BD%91%E7%BB%9C/</guid>
      <description>WebSocket 工作在七层（或者四层）中的哪一层？和 HTTP 是什么关系？ 是基于 UDP 的还是 TCP 的？ TCP 为什么是三次握手？为什么是四次挥手？ CDN 的工作原理是什么？ 运营商劫持是什么？如何防范？ HTTPS 一定是安全的么？如果不是，那么在什么情况下是不安全的？ 如何劫持 HTTPS 请求。 比如你需要抓 HTTPS 的包，怎么做？ 支付宝和微信的离线支付是怎么做的？ Token 和 Cookie 有什么区别和联系呢？其分别是为了解决什么样的事情？ WebSocket 需要 cookie 么？为什么？ WebSocket 是怎么实现点对点通信和广播通信的？ 如果访问你的 APP 很慢，你自己无法重现。 初步定位到网络问题， 那么你怎么能具体定位到问题呢？ traceroute, Ping 的原理是什么？ 192.168.0.1 和 192.168.1.1 如何通信？ DNS 是如何泄漏个人隐私的？怎么防范？ 从网络协议模型（七层 or 四层）的角度分析一下，浏览器访问 192.168.3.4:8088 的具体过程。</description>
    </item>
    
    <item>
      <title>前端知识汇总（一）：浏览器事件模型和事件循环</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%B8%80%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Mon, 28 Dec 2020 12:03:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%B8%80%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</guid>
      <description>事件模型 不论是浏览器还是Node.js，都有自己的事件模型，它们都是事件驱动的，即依靠事件来维持运行。 现在比较推荐的绑定事件的方法是addEventListener：
target.addEventListener(type, listener[, options]); target.addEventListener(type, listener[, useCapture]); target.addEventListener(type, listener[, useCapture, wantsUntrusted ]); // Gecko/Mozilla only 旧版本的第三个参数是bool，表示是否是捕获阶段，默认是false，即默认为冒泡阶段。新版本是一个对象，其中有capture（和上面功能一样），passive和once。once用来执行是否只执行一次，passive如果被指定为true, 表示永远不会执行preventDefault(),这在实现丝滑柔顺的滚动的效果中很重要。Improving scrolling performance with passive listeners
框架中的事件 框架中的事件 实际上，我们现在大多数情况都是用框架来写代码，因此上面的情况其实在现实中是非常少见的，我们更多看到的是框架封装好的事件，比如React的合成事件，感兴趣的可以看下这几篇文章。
 React SyntheticEvent Vue和React的优点分别是什么？两者的最核心差异对比是什么？  虽然我们很少时候会接触到原生的事件，但是了解一下事件对象，事件机制，事件代理等还是很有必要的，因为框架的事件系统至少在这方面还是一致的，这些内容我们接下来就会讲到。
事件对象 function handleClick(e: Event) { // ... } 这个e就是事件对象，它包含一些重要属性和方法：
 属性   target x, y等位置信息 timeStamp eventPhase   方法   preventDefault 用于阻止浏览器的默认行为，比如a标签会默认进行跳转，form会默认校验并发送请求到action指定的地址等 stopPropagation 用于阻止事件的继续冒泡行为，后面讲事件传播的时候会提到。  事件循环 事件指的是其所处理的对象就是事件本身，每一个浏览器都至少有一个事件循环，一个事件循环至少有一个任务队列。循环指的是其永远处于一个“无限循环”中。不断将注册的回调函数推入到执行栈。 一段JS代码，需要被编译成机器可理解并执行的指令，这就依赖JS引擎。而V8引擎中，有两个核心组成，即执行栈和堆。执行栈中存放正在执行的代码段，堆中存放变量的值。以一段简单代码为例：
function c() {} function b() { c(); } function a() { b(); }a(); 代码执行的过程可以用动图表示：   call stack</description>
    </item>
    
    <item>
      <title>Vue Router 4.0特性简介</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/vue-router-4.0%E7%89%B9%E6%80%A7%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 13 Dec 2020 19:23:26 +0800</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/vue-router-4.0%E7%89%B9%E6%80%A7%E7%AE%80%E4%BB%8B/</guid>
      <description>项目结构优化 Vue Router 现在分为三个模块：
 History 实现： 处理地址栏，并且特定于 Vue Router 运行的环境（节点，浏览器，移动设备等） Router 匹配器：处理类似 /users/:id 的路由解析和优先级处理。 Router: 将一切连接在一起，并处理路由特定功能，例如导航守卫。  |____types | |____typeGuards.ts // 对route进行校验 | |____index.ts // type和interface |____router.ts // connects everything together and handle routing specific features like navigation guards |____RouterLink.ts |____errors.ts |____globalExtensions.ts |____injectionSymbols.ts |____utils | |____callbacks.ts | |____README.md | |____index.ts | |____env.ts |____devtools.ts |____location.ts |____matcher // handles the parsing of routes /users/:id and its ranking | |____pathTokenizer.ts // path解析器，生成token数组tokenizePath | |____pathMatcher.</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/markdown-syntax-guide/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/markdown-syntax-guide/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/</guid>
      <description>The Code Reviewer&amp;rsquo;s Guide
 代码评审的标准  CR的主要目的就是确保公司的代码库的健壮性随着时间增强。所有的CR工具和过程都是为这一目标而设计的。为了达到这个目标，我们要平衡一系列的取舍。
首先，开发者必须要能够在他们的任务上实现代码的优化。如果不提交优化的代码，代码库永远也不会改良。另外，评审者在CR时提出的问题过于刁钻，也会抑制开发者make improvements的想法。
另一方面，确保每个CL的质量不会导致代码库健壮程度下降，是评审者的责任。这其实可能很棘手，因为代码库通常会随时间逐渐质量下降，尤其是在团队处于紧迫的时间限制下，他们会认为必须用最快的办法实现目标。
除此之外，一个评审者要对他们评审的代码有ownership和责任感。他们要确保代码库保持一致性、可维护性，还有所有在&amp;quot;What to look for in a code review.&amp;ldquo;提到的东西。
我们得出了如下的期待作为CR标准的准则：
总体而言，如果一个CL提升了系统整体代码健壮程度，那么评审者应该approve这个CL，即使它不是完美的。
In general, reviewers should favor approving a CL once it is in a state where it definitely improves the overall code health of the system being worked on, even if the CL isn&amp;rsquo;t perfect.
这是CR guidelines的最高优先级的原则。这其中当然有限制，例如，如果CL添加了评审者不想要存在于系统中的特性，即使代码设计良好，评审者也仍然可以否决这个CL。关键在于没有“完美”的代码 &amp;ldquo;perfect&amp;rdquo; code——只有更好的代码 better code。评审者不应要求作者润饰每一处细小的代码。相反，评审者应该平衡提升质量的需要和按他们提出的改动建议修改这两者的重要性。一个评审者应该追求的不是完美无暇，而是持续进步continuous improvement.
一个提升项目代码可维护性、可读性、可理解性的CL不应该仅仅因为它不够完美而被拖延几天或几周。评审者可以自在地指出一些可以改进的东西，但如果那不是非常重要，可以加个前缀Nit，来让开发者知晓那是一个用于润饰的可忽略的点。
注意：本文不支持必然会让代码健壮程度恶化的CL。唯一可能允许的情况的是面临emergency的时候。
指导
CR有一个重要的功能，那就是教给开发者一些关于开发语言、框架、整体软件设计原则等等的新知识。帮助开发者学习新的东西永远是OK的。分享知识本就是让系统代码健壮度随时间提升的一部分。只需要记住一个问题，如果你的评论是纯分享性的，不是帮助改善代码以贴合本文档所描述的标准的关键部分的，记得加个Nit的前缀，或者指明这个问题不是作者必须在这个CL中修复的。
原则
Technical facts and data overrule opinions and personal preferences.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/</guid>
      <description>一周多以前，vue-router团队正式发布了适配Vue 3的vue-router4.0版本。本文将结合4.0版本的release log对该版本的部分新特性进行介绍。
 项目结构优化  Vue Router 现在分为三个模块：* History 实现： 处理地址栏，并且特定于 Vue Router 运行的环境（节点，浏览器，移动设备等）
  Router Matcher：处理类似 /users/:id 的路由解析和优先级处理。
  Router: 将一切连接在一起，并处理路由特定功能，例如导航守卫。
  |____types // 全局通用type | |____typeGuards.ts // 对route进行校验 | |____index.ts // type和interface |____router.ts // connects everything together and handle routing specific features like navigation guards |____RouterLink.ts |____errors.ts |____globalExtensions.ts |____injectionSymbols.ts |____utils | |____callbacks.ts | |____README.md | |____index.ts | |____env.ts |____devtools.ts |____location.ts |____matcher // handles the parsing of routes /users/:id and its ranking | |____pathTokenizer.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://observerzq.github.io/ObzerverZQ.github.io/p/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://observerzq.github.io/ObzerverZQ.github.io/p/</guid>
      <description>小程序渲染原理 所有页面都可以抽象成一棵节点树，每个节点具有自身的属性，包括样式、事件等等。
一般的H5页面：HTML + CSS + JavaScript
小程序：WXML + WXSS + JavaScript 技术选型 目前来说，移动端页面渲染的方式主要有三种：
  Web 渲染。
  Native 原生渲染。
  Web 与 Native 两者掺杂，也即我们常说的 Hybrid 渲染。
  前面也说过，小程序最终的呈现形式，是 WebView + 原生组件，Hybrid 方式。我们结合之前对小程序的期望来看：
 开发门槛：Web 门槛低，不过 Native 也有像 RN 这样的框架支持
体验：Native 体验比 Web 好，Hybrid 在一定程度上比 Web 接近原生体验
版本更新：Web 支持在线更新，Native 则需要打包到微信一起审核发布
管控和安全：Web 可跳转或是改变页面内容，存在一些不可控因素和安全风险
 由于小程序的宿主是微信，如果用纯客户端原生技术来编写小程序 ，那小程序代码需要与微信代码一起编包，跟随微信发版本，这种方式跟开发节奏必然都是不对的。所以方向应该是需要像 Web 技术那样，有一份随时可更新的资源包放在云端，通过下载到本地，动态执行后即可渲染出界面。
如果用纯 Web 技术来渲染小程序，在一些有复杂交互的页面上可能会面临一些性能问题。这是因为在 Web 技术中，UI渲染跟 JavaScript 的脚本执行都在一个单线程中执行，这就容易导致一些逻辑任务抢占UI渲染的资源。
总地看来，小程序选择了 Hybrid 的渲染方式，可以用一种近似 Web 的方式来开发，并且还可以实现在线更新代码。同时，引入原生组件有以下好处：</description>
    </item>
    
  </channel>
</rss>
